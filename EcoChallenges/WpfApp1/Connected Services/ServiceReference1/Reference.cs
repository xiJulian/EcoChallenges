//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpfApp2.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WpfApp2.ServiceReference1.City cityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string firstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string lastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string passwordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int pointsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WpfApp2.ServiceReference1.City city {
            get {
                return this.cityField;
            }
            set {
                if ((object.ReferenceEquals(this.cityField, value) != true)) {
                    this.cityField = value;
                    this.RaisePropertyChanged("city");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.firstNameField, value) != true)) {
                    this.firstNameField = value;
                    this.RaisePropertyChanged("firstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.lastNameField, value) != true)) {
                    this.lastNameField = value;
                    this.RaisePropertyChanged("lastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string password {
            get {
                return this.passwordField;
            }
            set {
                if ((object.ReferenceEquals(this.passwordField, value) != true)) {
                    this.passwordField = value;
                    this.RaisePropertyChanged("password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int points {
            get {
                return this.pointsField;
            }
            set {
                if ((this.pointsField.Equals(value) != true)) {
                    this.pointsField = value;
                    this.RaisePropertyChanged("points");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="City", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class City : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Challenge", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Challenge : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string createdAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string descriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int pointsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string titleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string createdAt {
            get {
                return this.createdAtField;
            }
            set {
                if ((object.ReferenceEquals(this.createdAtField, value) != true)) {
                    this.createdAtField = value;
                    this.RaisePropertyChanged("createdAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.descriptionField, value) != true)) {
                    this.descriptionField = value;
                    this.RaisePropertyChanged("description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int points {
            get {
                return this.pointsField;
            }
            set {
                if ((this.pointsField.Equals(value) != true)) {
                    this.pointsField = value;
                    this.RaisePropertyChanged("points");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string title {
            get {
                return this.titleField;
            }
            set {
                if ((object.ReferenceEquals(this.titleField, value) != true)) {
                    this.titleField = value;
                    this.RaisePropertyChanged("title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserChallenge", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class UserChallenge : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int challengeIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string commentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string completedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isCompletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string startedAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string userEmailField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int challengeId {
            get {
                return this.challengeIdField;
            }
            set {
                if ((this.challengeIdField.Equals(value) != true)) {
                    this.challengeIdField = value;
                    this.RaisePropertyChanged("challengeId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                if ((object.ReferenceEquals(this.commentField, value) != true)) {
                    this.commentField = value;
                    this.RaisePropertyChanged("comment");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string completedAt {
            get {
                return this.completedAtField;
            }
            set {
                if ((object.ReferenceEquals(this.completedAtField, value) != true)) {
                    this.completedAtField = value;
                    this.RaisePropertyChanged("completedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isCompleted {
            get {
                return this.isCompletedField;
            }
            set {
                if ((this.isCompletedField.Equals(value) != true)) {
                    this.isCompletedField = value;
                    this.RaisePropertyChanged("isCompleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string startedAt {
            get {
                return this.startedAtField;
            }
            set {
                if ((object.ReferenceEquals(this.startedAtField, value) != true)) {
                    this.startedAtField = value;
                    this.RaisePropertyChanged("startedAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userEmail {
            get {
                return this.userEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.userEmailField, value) != true)) {
                    this.userEmailField = value;
                    this.RaisePropertyChanged("userEmail");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Message", Namespace="http://schemas.datacontract.org/2004/07/Model")]
    [System.SerializableAttribute()]
    public partial class Message : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string contentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string emailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isReadField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string sentAtField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string subjectField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string content {
            get {
                return this.contentField;
            }
            set {
                if ((object.ReferenceEquals(this.contentField, value) != true)) {
                    this.contentField = value;
                    this.RaisePropertyChanged("content");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string email {
            get {
                return this.emailField;
            }
            set {
                if ((object.ReferenceEquals(this.emailField, value) != true)) {
                    this.emailField = value;
                    this.RaisePropertyChanged("email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isRead {
            get {
                return this.isReadField;
            }
            set {
                if ((this.isReadField.Equals(value) != true)) {
                    this.isReadField = value;
                    this.RaisePropertyChanged("isRead");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string sentAt {
            get {
                return this.sentAtField;
            }
            set {
                if ((object.ReferenceEquals(this.sentAtField, value) != true)) {
                    this.sentAtField = value;
                    this.RaisePropertyChanged("sentAt");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string subject {
            get {
                return this.subjectField;
            }
            set {
                if ((object.ReferenceEquals(this.subjectField, value) != true)) {
                    this.subjectField = value;
                    this.RaisePropertyChanged("subject");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        WpfApp2.ServiceReference1.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllUsers", ReplyAction="http://tempuri.org/IService1/GetAllUsersResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserName", ReplyAction="http://tempuri.org/IService1/GetUserNameResponse")]
        string GetUserName(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserName", ReplyAction="http://tempuri.org/IService1/GetUserNameResponse")]
        System.Threading.Tasks.Task<string> GetUserNameAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserPassword", ReplyAction="http://tempuri.org/IService1/GetUserPasswordResponse")]
        string GetUserPassword(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserPassword", ReplyAction="http://tempuri.org/IService1/GetUserPasswordResponse")]
        System.Threading.Tasks.Task<string> GetUserPasswordAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetUserPassword", ReplyAction="http://tempuri.org/IService1/SetUserPasswordResponse")]
        int SetUserPassword(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetUserPassword", ReplyAction="http://tempuri.org/IService1/SetUserPasswordResponse")]
        System.Threading.Tasks.Task<int> SetUserPasswordAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserExists", ReplyAction="http://tempuri.org/IService1/UserExistsResponse")]
        bool UserExists(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserExists", ReplyAction="http://tempuri.org/IService1/UserExistsResponse")]
        System.Threading.Tasks.Task<bool> UserExistsAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        int AddUser(WpfApp2.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task<int> AddUserAsync(WpfApp2.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        int UpdateUser(WpfApp2.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateUser", ReplyAction="http://tempuri.org/IService1/UpdateUserResponse")]
        System.Threading.Tasks.Task<int> UpdateUserAsync(WpfApp2.ServiceReference1.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        int DeleteUser(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.Threading.Tasks.Task<int> DeleteUserAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUserPoints", ReplyAction="http://tempuri.org/IService1/AddUserPointsResponse")]
        int AddUserPoints(string email, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUserPoints", ReplyAction="http://tempuri.org/IService1/AddUserPointsResponse")]
        System.Threading.Tasks.Task<int> AddUserPointsAsync(string email, int points);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AdminExists", ReplyAction="http://tempuri.org/IService1/AdminExistsResponse")]
        bool AdminExists(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AdminExists", ReplyAction="http://tempuri.org/IService1/AdminExistsResponse")]
        System.Threading.Tasks.Task<bool> AdminExistsAsync(string email, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCities", ReplyAction="http://tempuri.org/IService1/GetAllCitiesResponse")]
        WpfApp2.ServiceReference1.City[] GetAllCities();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCities", ReplyAction="http://tempuri.org/IService1/GetAllCitiesResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City[]> GetAllCitiesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityByName", ReplyAction="http://tempuri.org/IService1/GetCityByNameResponse")]
        WpfApp2.ServiceReference1.City GetCityByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityByName", ReplyAction="http://tempuri.org/IService1/GetCityByNameResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City> GetCityByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityById", ReplyAction="http://tempuri.org/IService1/GetCityByIdResponse")]
        WpfApp2.ServiceReference1.City GetCityById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCityById", ReplyAction="http://tempuri.org/IService1/GetCityByIdResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City> GetCityByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OrderByCityName", ReplyAction="http://tempuri.org/IService1/OrderByCityNameResponse")]
        WpfApp2.ServiceReference1.City[] OrderByCityName();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/OrderByCityName", ReplyAction="http://tempuri.org/IService1/OrderByCityNameResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City[]> OrderByCityNameAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllChallenges", ReplyAction="http://tempuri.org/IService1/GetAllChallengesResponse")]
        WpfApp2.ServiceReference1.Challenge[] GetAllChallenges();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllChallenges", ReplyAction="http://tempuri.org/IService1/GetAllChallengesResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.Challenge[]> GetAllChallengesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetChallenge", ReplyAction="http://tempuri.org/IService1/GetChallengeResponse")]
        WpfApp2.ServiceReference1.Challenge GetChallenge(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetChallenge", ReplyAction="http://tempuri.org/IService1/GetChallengeResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.Challenge> GetChallengeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddChallenge", ReplyAction="http://tempuri.org/IService1/AddChallengeResponse")]
        int AddChallenge(WpfApp2.ServiceReference1.Challenge challenge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddChallenge", ReplyAction="http://tempuri.org/IService1/AddChallengeResponse")]
        System.Threading.Tasks.Task<int> AddChallengeAsync(WpfApp2.ServiceReference1.Challenge challenge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateChallenge", ReplyAction="http://tempuri.org/IService1/UpdateChallengeResponse")]
        int UpdateChallenge(WpfApp2.ServiceReference1.Challenge challenge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateChallenge", ReplyAction="http://tempuri.org/IService1/UpdateChallengeResponse")]
        System.Threading.Tasks.Task<int> UpdateChallengeAsync(WpfApp2.ServiceReference1.Challenge challenge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteChallenge", ReplyAction="http://tempuri.org/IService1/DeleteChallengeResponse")]
        int DeleteChallenge(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteChallenge", ReplyAction="http://tempuri.org/IService1/DeleteChallengeResponse")]
        System.Threading.Tasks.Task<int> DeleteChallengeAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllChallengesByUser", ReplyAction="http://tempuri.org/IService1/GetAllChallengesByUserResponse")]
        WpfApp2.ServiceReference1.UserChallenge[] GetAllChallengesByUser(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllChallengesByUser", ReplyAction="http://tempuri.org/IService1/GetAllChallengesByUserResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.UserChallenge[]> GetAllChallengesByUserAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCompletedChallenges", ReplyAction="http://tempuri.org/IService1/GetAllCompletedChallengesResponse")]
        WpfApp2.ServiceReference1.UserChallenge[] GetAllCompletedChallenges(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllCompletedChallenges", ReplyAction="http://tempuri.org/IService1/GetAllCompletedChallengesResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.UserChallenge[]> GetAllCompletedChallengesAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserChallenge", ReplyAction="http://tempuri.org/IService1/GetUserChallengeResponse")]
        WpfApp2.ServiceReference1.UserChallenge GetUserChallenge(int id, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserChallenge", ReplyAction="http://tempuri.org/IService1/GetUserChallengeResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.UserChallenge> GetUserChallengeAsync(int id, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUserChallenge", ReplyAction="http://tempuri.org/IService1/AddUserChallengeResponse")]
        int AddUserChallenge(WpfApp2.ServiceReference1.UserChallenge challenge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUserChallenge", ReplyAction="http://tempuri.org/IService1/AddUserChallengeResponse")]
        System.Threading.Tasks.Task<int> AddUserChallengeAsync(WpfApp2.ServiceReference1.UserChallenge challenge);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CompleteUserChallenge", ReplyAction="http://tempuri.org/IService1/CompleteUserChallengeResponse")]
        int CompleteUserChallenge(int id, string email, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CompleteUserChallenge", ReplyAction="http://tempuri.org/IService1/CompleteUserChallengeResponse")]
        System.Threading.Tasks.Task<int> CompleteUserChallengeAsync(int id, string email, string comment);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUserChallenge", ReplyAction="http://tempuri.org/IService1/DeleteUserChallengeResponse")]
        int DeleteUserChallenge(int id, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUserChallenge", ReplyAction="http://tempuri.org/IService1/DeleteUserChallengeResponse")]
        System.Threading.Tasks.Task<int> DeleteUserChallengeAsync(int id, string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMessages", ReplyAction="http://tempuri.org/IService1/GetAllMessagesResponse")]
        WpfApp2.ServiceReference1.Message[] GetAllMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllMessages", ReplyAction="http://tempuri.org/IService1/GetAllMessagesResponse")]
        System.Threading.Tasks.Task<WpfApp2.ServiceReference1.Message[]> GetAllMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateMessage", ReplyAction="http://tempuri.org/IService1/CreateMessageResponse")]
        int CreateMessage(WpfApp2.ServiceReference1.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateMessage", ReplyAction="http://tempuri.org/IService1/CreateMessageResponse")]
        System.Threading.Tasks.Task<int> CreateMessageAsync(WpfApp2.ServiceReference1.Message message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMessage", ReplyAction="http://tempuri.org/IService1/DeleteMessageResponse")]
        int DeleteMessage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteMessage", ReplyAction="http://tempuri.org/IService1/DeleteMessageResponse")]
        System.Threading.Tasks.Task<int> DeleteMessageAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MarkMessageAsRead", ReplyAction="http://tempuri.org/IService1/MarkMessageAsReadResponse")]
        int MarkMessageAsRead(int id, bool isRead);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/MarkMessageAsRead", ReplyAction="http://tempuri.org/IService1/MarkMessageAsReadResponse")]
        System.Threading.Tasks.Task<int> MarkMessageAsReadAsync(int id, bool isRead);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WpfApp2.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WpfApp2.ServiceReference1.IService1>, WpfApp2.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WpfApp2.ServiceReference1.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public string GetUserName(string email) {
            return base.Channel.GetUserName(email);
        }
        
        public System.Threading.Tasks.Task<string> GetUserNameAsync(string email) {
            return base.Channel.GetUserNameAsync(email);
        }
        
        public string GetUserPassword(string email) {
            return base.Channel.GetUserPassword(email);
        }
        
        public System.Threading.Tasks.Task<string> GetUserPasswordAsync(string email) {
            return base.Channel.GetUserPasswordAsync(email);
        }
        
        public int SetUserPassword(string email, string password) {
            return base.Channel.SetUserPassword(email, password);
        }
        
        public System.Threading.Tasks.Task<int> SetUserPasswordAsync(string email, string password) {
            return base.Channel.SetUserPasswordAsync(email, password);
        }
        
        public bool UserExists(string email) {
            return base.Channel.UserExists(email);
        }
        
        public System.Threading.Tasks.Task<bool> UserExistsAsync(string email) {
            return base.Channel.UserExistsAsync(email);
        }
        
        public int AddUser(WpfApp2.ServiceReference1.User user) {
            return base.Channel.AddUser(user);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAsync(WpfApp2.ServiceReference1.User user) {
            return base.Channel.AddUserAsync(user);
        }
        
        public int UpdateUser(WpfApp2.ServiceReference1.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<int> UpdateUserAsync(WpfApp2.ServiceReference1.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public int DeleteUser(string email, string password) {
            return base.Channel.DeleteUser(email, password);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserAsync(string email, string password) {
            return base.Channel.DeleteUserAsync(email, password);
        }
        
        public int AddUserPoints(string email, int points) {
            return base.Channel.AddUserPoints(email, points);
        }
        
        public System.Threading.Tasks.Task<int> AddUserPointsAsync(string email, int points) {
            return base.Channel.AddUserPointsAsync(email, points);
        }
        
        public bool AdminExists(string email, string password) {
            return base.Channel.AdminExists(email, password);
        }
        
        public System.Threading.Tasks.Task<bool> AdminExistsAsync(string email, string password) {
            return base.Channel.AdminExistsAsync(email, password);
        }
        
        public WpfApp2.ServiceReference1.City[] GetAllCities() {
            return base.Channel.GetAllCities();
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City[]> GetAllCitiesAsync() {
            return base.Channel.GetAllCitiesAsync();
        }
        
        public WpfApp2.ServiceReference1.City GetCityByName(string name) {
            return base.Channel.GetCityByName(name);
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City> GetCityByNameAsync(string name) {
            return base.Channel.GetCityByNameAsync(name);
        }
        
        public WpfApp2.ServiceReference1.City GetCityById(int id) {
            return base.Channel.GetCityById(id);
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City> GetCityByIdAsync(int id) {
            return base.Channel.GetCityByIdAsync(id);
        }
        
        public WpfApp2.ServiceReference1.City[] OrderByCityName() {
            return base.Channel.OrderByCityName();
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.City[]> OrderByCityNameAsync() {
            return base.Channel.OrderByCityNameAsync();
        }
        
        public WpfApp2.ServiceReference1.Challenge[] GetAllChallenges() {
            return base.Channel.GetAllChallenges();
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.Challenge[]> GetAllChallengesAsync() {
            return base.Channel.GetAllChallengesAsync();
        }
        
        public WpfApp2.ServiceReference1.Challenge GetChallenge(int id) {
            return base.Channel.GetChallenge(id);
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.Challenge> GetChallengeAsync(int id) {
            return base.Channel.GetChallengeAsync(id);
        }
        
        public int AddChallenge(WpfApp2.ServiceReference1.Challenge challenge) {
            return base.Channel.AddChallenge(challenge);
        }
        
        public System.Threading.Tasks.Task<int> AddChallengeAsync(WpfApp2.ServiceReference1.Challenge challenge) {
            return base.Channel.AddChallengeAsync(challenge);
        }
        
        public int UpdateChallenge(WpfApp2.ServiceReference1.Challenge challenge) {
            return base.Channel.UpdateChallenge(challenge);
        }
        
        public System.Threading.Tasks.Task<int> UpdateChallengeAsync(WpfApp2.ServiceReference1.Challenge challenge) {
            return base.Channel.UpdateChallengeAsync(challenge);
        }
        
        public int DeleteChallenge(int id) {
            return base.Channel.DeleteChallenge(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteChallengeAsync(int id) {
            return base.Channel.DeleteChallengeAsync(id);
        }
        
        public WpfApp2.ServiceReference1.UserChallenge[] GetAllChallengesByUser(string email) {
            return base.Channel.GetAllChallengesByUser(email);
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.UserChallenge[]> GetAllChallengesByUserAsync(string email) {
            return base.Channel.GetAllChallengesByUserAsync(email);
        }
        
        public WpfApp2.ServiceReference1.UserChallenge[] GetAllCompletedChallenges(int id) {
            return base.Channel.GetAllCompletedChallenges(id);
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.UserChallenge[]> GetAllCompletedChallengesAsync(int id) {
            return base.Channel.GetAllCompletedChallengesAsync(id);
        }
        
        public WpfApp2.ServiceReference1.UserChallenge GetUserChallenge(int id, string email) {
            return base.Channel.GetUserChallenge(id, email);
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.UserChallenge> GetUserChallengeAsync(int id, string email) {
            return base.Channel.GetUserChallengeAsync(id, email);
        }
        
        public int AddUserChallenge(WpfApp2.ServiceReference1.UserChallenge challenge) {
            return base.Channel.AddUserChallenge(challenge);
        }
        
        public System.Threading.Tasks.Task<int> AddUserChallengeAsync(WpfApp2.ServiceReference1.UserChallenge challenge) {
            return base.Channel.AddUserChallengeAsync(challenge);
        }
        
        public int CompleteUserChallenge(int id, string email, string comment) {
            return base.Channel.CompleteUserChallenge(id, email, comment);
        }
        
        public System.Threading.Tasks.Task<int> CompleteUserChallengeAsync(int id, string email, string comment) {
            return base.Channel.CompleteUserChallengeAsync(id, email, comment);
        }
        
        public int DeleteUserChallenge(int id, string email) {
            return base.Channel.DeleteUserChallenge(id, email);
        }
        
        public System.Threading.Tasks.Task<int> DeleteUserChallengeAsync(int id, string email) {
            return base.Channel.DeleteUserChallengeAsync(id, email);
        }
        
        public WpfApp2.ServiceReference1.Message[] GetAllMessages() {
            return base.Channel.GetAllMessages();
        }
        
        public System.Threading.Tasks.Task<WpfApp2.ServiceReference1.Message[]> GetAllMessagesAsync() {
            return base.Channel.GetAllMessagesAsync();
        }
        
        public int CreateMessage(WpfApp2.ServiceReference1.Message message) {
            return base.Channel.CreateMessage(message);
        }
        
        public System.Threading.Tasks.Task<int> CreateMessageAsync(WpfApp2.ServiceReference1.Message message) {
            return base.Channel.CreateMessageAsync(message);
        }
        
        public int DeleteMessage(int id) {
            return base.Channel.DeleteMessage(id);
        }
        
        public System.Threading.Tasks.Task<int> DeleteMessageAsync(int id) {
            return base.Channel.DeleteMessageAsync(id);
        }
        
        public int MarkMessageAsRead(int id, bool isRead) {
            return base.Channel.MarkMessageAsRead(id, isRead);
        }
        
        public System.Threading.Tasks.Task<int> MarkMessageAsReadAsync(int id, bool isRead) {
            return base.Channel.MarkMessageAsReadAsync(id, isRead);
        }
    }
}
